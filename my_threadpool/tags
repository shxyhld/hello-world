!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AddTask	thread_pool.cpp	/^void ThreadPool::AddTask(FuncType func, void* arg)$/;"	f	class:ThreadPool	signature:(FuncType func, void* arg)
AddTask	thread_pool.h	/^        void AddTask(FuncType func, void* arg);    \/\/添加任务接口;$/;"	p	class:ThreadPool	access:public	signature:(FuncType func, void* arg)
Broadcast	condition.cpp	/^int Condition::Broadcast()$/;"	f	class:Condition	signature:()
Broadcast	condition.h	/^        int Broadcast();$/;"	p	class:Condition	access:public	signature:()
Condition	condition.cpp	/^Condition::Condition(const pthread_mutexattr_t* mutex_attr, const pthread_condattr_t* cond_attr)$/;"	f	class:Condition	signature:(const pthread_mutexattr_t* mutex_attr, const pthread_condattr_t* cond_attr)
Condition	condition.h	/^        Condition(const pthread_mutexattr_t* mutex_attr = NULL, const pthread_condattr_t* cond_attr = NULL);$/;"	p	class:Condition	access:public	signature:(const pthread_mutexattr_t* mutex_attr = NULL, const pthread_condattr_t* cond_attr = NULL)
Condition	condition.h	/^class Condition$/;"	c
Condition::Broadcast	condition.cpp	/^int Condition::Broadcast()$/;"	f	class:Condition	signature:()
Condition::Broadcast	condition.h	/^        int Broadcast();$/;"	p	class:Condition	access:public	signature:()
Condition::Condition	condition.cpp	/^Condition::Condition(const pthread_mutexattr_t* mutex_attr, const pthread_condattr_t* cond_attr)$/;"	f	class:Condition	signature:(const pthread_mutexattr_t* mutex_attr, const pthread_condattr_t* cond_attr)
Condition::Condition	condition.h	/^        Condition(const pthread_mutexattr_t* mutex_attr = NULL, const pthread_condattr_t* cond_attr = NULL);$/;"	p	class:Condition	access:public	signature:(const pthread_mutexattr_t* mutex_attr = NULL, const pthread_condattr_t* cond_attr = NULL)
Condition::Lock	condition.cpp	/^int Condition::Lock()$/;"	f	class:Condition	signature:()
Condition::Lock	condition.h	/^        int Lock();$/;"	p	class:Condition	access:public	signature:()
Condition::Signal	condition.cpp	/^int Condition::Signal()$/;"	f	class:Condition	signature:()
Condition::Signal	condition.h	/^        int Signal();$/;"	p	class:Condition	access:public	signature:()
Condition::TimeWait	condition.cpp	/^int Condition::TimeWait(int seconds)$/;"	f	class:Condition	signature:(int seconds)
Condition::TimeWait	condition.h	/^        int TimeWait(int seconds);$/;"	p	class:Condition	access:public	signature:(int seconds)
Condition::TryLock	condition.cpp	/^int Condition::TryLock()$/;"	f	class:Condition	signature:()
Condition::TryLock	condition.h	/^        int TryLock();$/;"	p	class:Condition	access:public	signature:()
Condition::Unlock	condition.cpp	/^int Condition::Unlock()$/;"	f	class:Condition	signature:()
Condition::Unlock	condition.h	/^        int Unlock();$/;"	p	class:Condition	access:public	signature:()
Condition::Wait	condition.cpp	/^int Condition::Wait()$/;"	f	class:Condition	signature:()
Condition::Wait	condition.h	/^        int Wait();$/;"	p	class:Condition	access:public	signature:()
Condition::m_cond	condition.h	/^        pthread_cond_t m_cond;$/;"	m	class:Condition	access:private
Condition::m_mutex	condition.h	/^        pthread_mutex_t m_mutex;$/;"	m	class:Condition	access:private
Condition::~Condition	condition.cpp	/^Condition::~Condition()$/;"	f	class:Condition	signature:()
Condition::~Condition	condition.h	/^        ~Condition();$/;"	p	class:Condition	access:public	signature:()
FuncType	thread_pool.h	/^typedef void* (*FuncType)(void* arg);$/;"	t
Lock	condition.cpp	/^int Condition::Lock()$/;"	f	class:Condition	signature:()
Lock	condition.h	/^        int Lock();$/;"	p	class:Condition	access:public	signature:()
MyTask	main.cpp	/^void* MyTask(void* arg)$/;"	f	signature:(void* arg)
Q	main	/^/;"	v
Signal	condition.cpp	/^int Condition::Signal()$/;"	f	class:Condition	signature:()
Signal	condition.h	/^        int Signal();$/;"	p	class:Condition	access:public	signature:()
StartRoutine	thread_pool.cpp	/^void* StartRoutine(void* arg)$/;"	f	signature:(void* arg)
StartRoutine	thread_pool.h	/^    friend void* StartRoutine(void* arg);$/;"	p	class:ThreadPool	access:friend	signature:(void* arg)
StartTask	thread_pool.cpp	/^void ThreadPool::StartTask()$/;"	f	class:ThreadPool	signature:()
StartTask	thread_pool.h	/^        void StartTask();     $/;"	p	class:ThreadPool	access:private	signature:()
TaskInfo	thread_pool.h	/^    TaskInfo(FuncType func, void* arg):m_func(func),m_arg(arg)$/;"	f	struct:TaskInfo	access:public	signature:(FuncType func, void* arg)
TaskInfo	thread_pool.h	/^struct TaskInfo$/;"	s
TaskInfo::TaskInfo	thread_pool.h	/^    TaskInfo(FuncType func, void* arg):m_func(func),m_arg(arg)$/;"	f	struct:TaskInfo	access:public	signature:(FuncType func, void* arg)
TaskInfo::m_arg	thread_pool.h	/^    void* m_arg;$/;"	m	struct:TaskInfo	access:public
TaskInfo::m_func	thread_pool.h	/^    FuncType m_func;$/;"	m	struct:TaskInfo	access:public
ThreadPool	thread_pool.cpp	/^ThreadPool::ThreadPool(uint max_thread_num, uint wait_seconds):m_idle(0),m_counter(0),m_max_thread_num(0),m_wait_seconds(0)$/;"	f	class:ThreadPool	signature:(uint max_thread_num, uint wait_seconds)
ThreadPool	thread_pool.h	/^        ThreadPool(uint max_thread_num, uint wait_seconds);$/;"	p	class:ThreadPool	access:public	signature:(uint max_thread_num, uint wait_seconds)
ThreadPool	thread_pool.h	/^class ThreadPool$/;"	c
ThreadPool::AddTask	thread_pool.cpp	/^void ThreadPool::AddTask(FuncType func, void* arg)$/;"	f	class:ThreadPool	signature:(FuncType func, void* arg)
ThreadPool::AddTask	thread_pool.h	/^        void AddTask(FuncType func, void* arg);    \/\/添加任务接口;$/;"	p	class:ThreadPool	access:public	signature:(FuncType func, void* arg)
ThreadPool::StartRoutine	thread_pool.h	/^    friend void* StartRoutine(void* arg);$/;"	p	class:ThreadPool	access:friend	signature:(void* arg)
ThreadPool::StartTask	thread_pool.cpp	/^void ThreadPool::StartTask()$/;"	f	class:ThreadPool	signature:()
ThreadPool::StartTask	thread_pool.h	/^        void StartTask();     $/;"	p	class:ThreadPool	access:private	signature:()
ThreadPool::ThreadPool	thread_pool.cpp	/^ThreadPool::ThreadPool(uint max_thread_num, uint wait_seconds):m_idle(0),m_counter(0),m_max_thread_num(0),m_wait_seconds(0)$/;"	f	class:ThreadPool	signature:(uint max_thread_num, uint wait_seconds)
ThreadPool::ThreadPool	thread_pool.h	/^        ThreadPool(uint max_thread_num, uint wait_seconds);$/;"	p	class:ThreadPool	access:public	signature:(uint max_thread_num, uint wait_seconds)
ThreadPool::m_cond	thread_pool.h	/^        Condition m_cond;               \/\/条件变量;$/;"	m	class:ThreadPool	access:private
ThreadPool::m_counter	thread_pool.h	/^        uint m_counter;                 \/\/已经创建的进程总数量;$/;"	m	class:ThreadPool	access:private
ThreadPool::m_idle	thread_pool.h	/^        uint m_idle;                    \/\/空闲线程数量;$/;"	m	class:ThreadPool	access:private
ThreadPool::m_is_quit	thread_pool.h	/^        bool m_is_quit;                 \/\/线程池退出标志;$/;"	m	class:ThreadPool	access:private
ThreadPool::m_max_thread_num	thread_pool.h	/^        uint m_max_thread_num;          \/\/最大创建线程的数量;$/;"	m	class:ThreadPool	access:private
ThreadPool::m_tasks	thread_pool.h	/^        queue<TaskInfo*> m_tasks;       \/\/任务队列;$/;"	m	class:ThreadPool	access:private
ThreadPool::m_wait_seconds	thread_pool.h	/^        uint m_wait_seconds;            \/\/线程可以等待的秒数，超过这个时间线程将被回收节约资源;$/;"	m	class:ThreadPool	access:private
ThreadPool::~ThreadPool	thread_pool.cpp	/^ThreadPool::~ThreadPool()$/;"	f	class:ThreadPool	signature:()
ThreadPool::~ThreadPool	thread_pool.h	/^        ~ThreadPool();$/;"	p	class:ThreadPool	access:public	signature:()
Thread_Exception	thread_exception.h	/^Thread_Exception::Thread_Exception(string& msg, int nRet):m_msg(msg)$/;"	f	class:Thread_Exception	signature:(string& msg, int nRet)
Thread_Exception	thread_exception.h	/^class Thread_Exception()$/;"	f	signature:()
Thread_Exception::Thread_Exception	thread_exception.h	/^Thread_Exception::Thread_Exception(string& msg, int nRet):m_msg(msg)$/;"	f	class:Thread_Exception	signature:(string& msg, int nRet)
TimeWait	condition.cpp	/^int Condition::TimeWait(int seconds)$/;"	f	class:Condition	signature:(int seconds)
TimeWait	condition.h	/^        int TimeWait(int seconds);$/;"	p	class:Condition	access:public	signature:(int seconds)
TryLock	condition.cpp	/^int Condition::TryLock()$/;"	f	class:Condition	signature:()
TryLock	condition.h	/^        int TryLock();$/;"	p	class:Condition	access:public	signature:()
Unlock	condition.cpp	/^int Condition::Unlock()$/;"	f	class:Condition	signature:()
Unlock	condition.h	/^        int Unlock();$/;"	p	class:Condition	access:public	signature:()
Wait	condition.cpp	/^int Condition::Wait()$/;"	f	class:Condition	signature:()
Wait	condition.h	/^        int Wait();$/;"	p	class:Condition	access:public	signature:()
_CONDITION_H	condition.h	2;"	d
_THREAD_EXCEPTION_H_	thread_exception.h	2;"	d
_THREAD_POOL_H_	thread_pool.h	2;"	d
format	tags	/^!_TAG_FILE_FORMAT	2	\/extended format; --format=1 will not append ;" to lines\/$/;"	v
m_arg	thread_pool.h	/^    void* m_arg;$/;"	m	struct:TaskInfo	access:public
m_cond	condition.h	/^        pthread_cond_t m_cond;$/;"	m	class:Condition	access:private
m_cond	thread_pool.h	/^        Condition m_cond;               \/\/条件变量;$/;"	m	class:ThreadPool	access:private
m_counter	thread_pool.h	/^        uint m_counter;                 \/\/已经创建的进程总数量;$/;"	m	class:ThreadPool	access:private
m_func	thread_pool.h	/^    FuncType m_func;$/;"	m	struct:TaskInfo	access:public
m_idle	thread_pool.h	/^        uint m_idle;                    \/\/空闲线程数量;$/;"	m	class:ThreadPool	access:private
m_is_quit	thread_pool.h	/^        bool m_is_quit;                 \/\/线程池退出标志;$/;"	m	class:ThreadPool	access:private
m_max_thread_num	thread_pool.h	/^        uint m_max_thread_num;          \/\/最大创建线程的数量;$/;"	m	class:ThreadPool	access:private
m_mutex	condition.h	/^        pthread_mutex_t m_mutex;$/;"	m	class:Condition	access:private
m_tasks	thread_pool.h	/^        queue<TaskInfo*> m_tasks;       \/\/任务队列;$/;"	m	class:ThreadPool	access:private
m_wait_seconds	thread_pool.h	/^        uint m_wait_seconds;            \/\/线程可以等待的秒数，超过这个时间线程将被回收节约资源;$/;"	m	class:ThreadPool	access:private
main	main.cpp	/^int main()$/;"	f	signature:()
uint	thread_pool.h	/^typedef unsigned int uint;$/;"	t
what	thread_exception.h	/^sting what() const$/;"	f	signature:() const
~Condition	condition.cpp	/^Condition::~Condition()$/;"	f	class:Condition	signature:()
~Condition	condition.h	/^        ~Condition();$/;"	p	class:Condition	access:public	signature:()
~ThreadPool	thread_pool.cpp	/^ThreadPool::~ThreadPool()$/;"	f	class:ThreadPool	signature:()
~ThreadPool	thread_pool.h	/^        ~ThreadPool();$/;"	p	class:ThreadPool	access:public	signature:()
